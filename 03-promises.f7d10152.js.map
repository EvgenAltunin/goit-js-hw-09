{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,oBAIK,IAArCE,EAAa,EACbC,EAAiB,EACjBC,EAAc,EAyBkC,SAA3CC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,CAAEG,SAAAT,EAAUU,MAAAT,IAEUM,EAAvB,CAAEE,SAAAT,EAAUU,MAAAT,GAAQ,GAE5BL,EAAW,IAIfe,MAAK,EAACF,SAAEA,EAAQC,MAAEA,MACjBrB,EAAAuB,OAAOC,QAAQ,uBAAqBJ,QAAiBC,MAAU,IAEhEI,OAAM,EAACL,SAAEA,EAAQC,MAAEA,MAClBrB,EAAAuB,OAAOG,QAAQ,sBAAoBN,QAAiBC,MAAU,G,CAvClEnB,EAAKI,UAAUqB,iBAAiB,SAGhB,SAAUC,GACxBA,EAAMC,iBAEqCtB,EAA9BuB,OAAO5B,EAAKC,KAAKkB,MAAMU,OACpCvB,EAAiBsB,OAAO5B,EAAKC,KAAK6B,KAAKD,OACvCtB,EAAcqB,OAAO5B,EAAKC,KAAK8B,OAAOF,OAOtC,IAAK,IAAIG,EAAI,EAAGA,GAAKzB,EAAayB,GAAK,EACrCxB,EAAcwB,EAAG3B,GACjBA,GAAcC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  submitBtn: document.querySelector('[type=\"submit\"]')\n}\n\n// Задаємо початкові значення змінних для інпутів\nlet delayValue = 0;\nlet delayStepValue = 0;\nlet anountValue = 0;\n\n\nrefs.submitBtn.addEventListener('click', onSubmitBtnClick);\n\n// При кліку на кнопку:\nfunction onSubmitBtnClick(event) {\n  event.preventDefault();\n  // Отримуємо значення інпутів і записуємо їх в змінні\n  delayValue = Number(refs.form.delay.value);\n  delayStepValue = Number(refs.form.step.value);\n  anountValue = Number(refs.form.amount.value);\n\n  /*\n    Викликаємо функцію createPromise для створення промісу стільки разів, скільки вказано в\n    змінній anountValue та на кожній ітерації передаємо функції номер виклику та затримку, \n    збільшену на крок зазначений в змінній delayStepValue\n  */\n  for (let i = 1; i <= anountValue; i += 1) {\n    createPromise(i, delayValue);\n    delayValue += delayStepValue;\n  }\n  \n}\n// Створюємо функцію для виклику 1 промісу із заданою затримкою в delayValue\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3; // Випадково визначаємо чи буде операція успішна \n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Якщо операція завершилась успішно\n      } else {\n        reject({ position, delay }); // Якщо операція завершилась не успішно\n      }\n    }, delayValue);\n  });\n\n  promise\n  .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`); // Виводимо повідомлення при успішній операції\n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`); // Виводимо повідомлення при не успішній операції\n  });\n}\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","submitBtn","$47d4ff9957288465$var$delayValue","$47d4ff9957288465$var$delayStepValue","$47d4ff9957288465$var$anountValue","$47d4ff9957288465$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","delay","then","Notify","success","catch","failure","addEventListener","event","preventDefault","Number","value","step","amount","i"],"version":3,"file":"03-promises.f7d10152.js.map"}