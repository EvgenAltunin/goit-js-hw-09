{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,oBAIhCE,EAAa,EACbC,EAAiB,EACjBC,EAAc,EAyBkC,SAA3CC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAAEG,SAAAT,EAAUU,MAAAT,IAEUM,EAAvB,CAAEE,SAAAT,EAAUU,MAAAT,G,GAEpBL,E,IAIJe,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACjBrB,EAAAwB,OAAOC,QAAQ,uBAAwCC,OAAfN,EAAS,QAAYM,OAANL,EAAM,M,IAE9DM,OAAM,SAAAJ,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAClBrB,EAAAwB,OAAOI,QAAQ,sBAAuCF,OAAfN,EAAS,QAAYM,OAANL,EAAM,M,IAvChEnB,EAAKI,UAAUuB,iBAAiB,SAGhB,SAAUC,GACxBA,EAAMC,iBAEqCxB,EAA9ByB,OAAO9B,EAAKC,KAAKkB,MAAMY,OACpCzB,EAAiBwB,OAAO9B,EAAKC,KAAK+B,KAAKD,OACvCxB,EAAcuB,OAAO9B,EAAKC,KAAKgC,OAAOF,OAOtC,IAAK,IAAIG,EAAI,EAAGA,GAAK3B,EAAa2B,GAAK,EACrC1B,EAAc0B,EAAG7B,GACjBA,GAAcC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  submitBtn: document.querySelector('[type=\"submit\"]')\n}\n\n// Задаємо початкові значення змінних для інпутів\nlet delayValue = 0;\nlet delayStepValue = 0;\nlet anountValue = 0;\n\n\nrefs.submitBtn.addEventListener('click', onSubmitBtnClick);\n\n// При кліку на кнопку:\nfunction onSubmitBtnClick(event) {\n  event.preventDefault();\n  // Отримуємо значення інпутів і записуємо їх в змінні\n  delayValue = Number(refs.form.delay.value);\n  delayStepValue = Number(refs.form.step.value);\n  anountValue = Number(refs.form.amount.value);\n\n  /*\n    Викликаємо функцію createPromise для створення промісу стільки разів, скільки вказано в\n    змінній anountValue та на кожній ітерації передаємо функції номер виклику та затримку, \n    збільшену на крок зазначений в змінній delayStepValue\n  */\n  for (let i = 1; i <= anountValue; i += 1) {\n    createPromise(i, delayValue);\n    delayValue += delayStepValue;\n  }\n  \n}\n// Створюємо функцію для виклику 1 промісу із заданою затримкою в delayValue\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3; // Випадково визначаємо чи буде операція успішна \n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Якщо операція завершилась успішно\n      } else {\n        reject({ position, delay }); // Якщо операція завершилась не успішно\n      }\n    }, delayValue);\n  });\n\n  promise\n  .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`); // Виводимо повідомлення при успішній операції\n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`); // Виводимо повідомлення при не успішній операції\n  });\n}\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","submitBtn","$ce04d3a99e08e73b$var$delayValue","$ce04d3a99e08e73b$var$delayStepValue","$ce04d3a99e08e73b$var$anountValue","$ce04d3a99e08e73b$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","delay","then","param","Notify","success","concat","catch","failure","addEventListener","event","preventDefault","Number","value","step","amount","i"],"version":3,"file":"03-promises.f1a30800.js.map"}